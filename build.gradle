buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.gradle:build-scan-plugin:1.9"
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}
//plugins {
//	id java
//	id eclipse
//	id 'org.springframework.boot' version '1.5.2.RELEASE'
//	id "com.eriwen.gradle.js" version "2.14.1"
//}

apply plugin: "com.gradle.build-scan"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.ssh'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    groovyRuntime
}

processResources {
    //exclude '**/*.css'
    //exclude '**/*.js'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

sourceSets {
    main {
        resources {
            exclude 'jenkinsfile.gdsl'
        }
    }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.liquibase:liquibase-core')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.springfox:springfox-swagger-ui:2.7.0')

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('mysql:mysql-connector-java')

    compile('com.github.theholywaffle:teamspeak3-api:1.0.14')
    compile('org.bitbucket.b_c:jose4j:0.5.5')

    compile('org.webjars:webjars-locator:0.32-1')

    runtime('org.webjars:bootstrap:4.0.0-alpha.6')
    runtime('org.webjars:tether:1.4.0')
    runtime('org.webjars:jquery:3.2.0')
    runtime('org.webjars:font-awesome:4.7.0')
    runtime('org.webjars.bower:simple-line-icons:2.2.2')
    runtime('org.webjars:pace:1.0.2')
    runtime('org.webjars:chartjs:2.4.0')

    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    testRuntime('com.h2database:h2:1.4.196')

    groovyRuntime "org.codehaus.groovy:groovy-all:2.4.12"

}

remotes {
    staging {
        host = findProperty('STAGING_HOST')
        user = findProperty('STAGING_USER')
        identity = file(findProperty('STAGING_IDENTITY'))
        knownHosts = allowAnyHosts
    }
    production {
        host = findProperty('PRODUCTION_HOST')
        user = findProperty('PRODUCTION_USER')
        identity = findProperty('PRODUCTION_IDENTITY')
    }
}

ssh.settings {
    extensions.add installTool: { File script, FileCollection payload ->
        def tmpDir = "/tmp/${UUID.randomUUID()}/"
        try {
            //put from: project.configurations.groovyRuntime, into: tmpDir
            put from: payload, into: tmpDir
            put from: script, into: "$tmpDir/script.groovy"
            execute "java -jar $tmpDir/groovy-all-*.jar $tmpDir/script.groovy"
        } finally {
            execute "rm -rf $tmpDir"
        }
    }
}

task deployStaging {
    doLast {
        ssh.run {
            session(remotes.staging) {
                installTool null, project.files(jar)
            }
        }
    }
}

task deployProduction {
    doLast {
        ssh.run {
            session(remotes.production) {
                installTool null, project.files(jar)
            }
        }
    }
}

